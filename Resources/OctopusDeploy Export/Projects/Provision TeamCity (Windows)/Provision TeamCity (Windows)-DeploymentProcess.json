{
  "$type": "Octopus.Core.Model.Projects.DeploymentProcess, Octopus.Core",
  "Id": "deploymentprocess-Projects-5",
  "OwnerId": "Projects-5",
  "Version": 61,
  "Steps": [
    {
      "Id": "b7ee23bf-e81a-49d2-8510-f83d44038445",
      "Name": "Create TeamCityStack Resource Group",
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "RequiresPackagesToBeAcquired": false,
      "Actions": [
        {
          "Id": "14c402f7-c5b3-4d15-b3d3-aea4ce30c7e6",
          "Name": "Create TeamCityStack Resource Group",
          "ActionType": "Octopus.AzurePowerShell",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.Azure.AccountId": "azureserviceprincipal-microsoft-azure-service-principal",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "$resourceGroup = Get-AzureRmResourceGroup -Name $TeamCityRg -ErrorAction SilentlyContinue\r\nif(!$resourceGroup) {\r\n    Write-Host \"Creating resource group '$TeamCityRg' in location '$AzureRegion'\"\r\n    New-AzureRmResourceGroup -Name $TeamCityRg -Location $AzureRegion | Out-Null\r\n}\r\nelse {\r\n    Write-Host \"Using existing resource group '$TeamCityRg'\"\r\n}"
          }
        }
      ],
      "Properties": {
        "Octopus.Action.TargetRoles": "ARM Provisioning"
      }
    },
    {
      "Id": "e3c3d1ee-cba3-4fa0-834f-d17acdab474b",
      "Name": "Provision Windows Server 2016 VM",
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "RequiresPackagesToBeAcquired": false,
      "Actions": [
        {
          "Id": "6d578350-a917-4272-ba30-1c7ebcebefc2",
          "Name": "Provision Windows Server 2016 VM",
          "ActionType": "Octopus.AzureResourceGroup",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.Azure.AccountId": "azureserviceprincipal-microsoft-azure-service-principal",
            "Octopus.Action.Azure.ResourceGroupName": "#{TeamCityRg}",
            "Octopus.Action.Azure.TemplateSource": "Inline",
            "Octopus.Action.Azure.ResourceGroupTemplateParameters": "{\"infraResourceGroup\":{\"value\":\"#{InfraRg}\"},\"udp\":{\"value\":\"#{UDP}\"},\"productName\":{\"value\":\"TeamCity\"},\"vmSize\":{\"value\":\"Standard_DS2_v2\"},\"vmAdminUsername\":{\"value\":\"#{StackAdminUsername}\"},\"vmAdminPassword\":{\"reference\":{\"keyVault\":{\"id\":\"#{KeyVaultResourceId}\"},\"secretName\":\"VMAdminPassword\"}},\"clientID\":{\"value\":\"#{ServicePrincipalClientId}\"},\"clientSecret\":{\"reference\":{\"keyVault\":{\"id\":\"#{KeyVaultResourceId}\"},\"secretName\":\"ServicePrincipalClientSecret\"}}}",
            "Octopus.Action.Azure.ResourceGroupTemplate": "{\r\n  \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n  \"contentVersion\": \"1.0.0.0\",\r\n  \"parameters\": {\r\n    \"infraResourceGroup\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"Name of the resource group containing the core automationstack infrastructure\"\r\n      }\r\n    },\r\n    \"udp\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"Unique Deployment Prefix to avoid name collisions\"\r\n      }\r\n    },\r\n    \"productName\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"Name of the product that is running on this VM\"\r\n      }\r\n    },\r\n    \"vmSize\": {\r\n      \"type\": \"string\",\r\n      \"defaultValue\": \"Standard_DS2_v2\",\r\n      \"metadata\": {\r\n        \"description\": \"Size of the VM\"\r\n      }\r\n    },\r\n    \"vmAdminUsername\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"Username for the Virtual Machine.\"\r\n      }\r\n    },\r\n    \"vmAdminPassword\": {\r\n      \"type\": \"securestring\",\r\n      \"metadata\": {\r\n        \"description\": \"Password for the Virtual Machine.\"\r\n      }\r\n    },\r\n    \"clientID\": {\r\n      \"type\": \"string\",\r\n      \"metadata\": {\r\n        \"description\": \"Client ID of AAD app which has permissions to KeyVault\"\r\n      }\r\n    },\r\n    \"clientSecret\": {\r\n      \"type\": \"securestring\",\r\n      \"metadata\": {\r\n        \"description\": \"Client Secret of AAD app which has permissions to KeyVault\"\r\n      }\r\n    }\r\n  },\r\n  \"variables\": {\r\n    \"vmName\": \"[concat(parameters('productName'),'VM')]\",\r\n    \"vmStorageName\": \"[concat('vmvhds', parameters('udp'), uniquestring(resourceGroup().id))]\",\r\n    \"nsgName\": \"[concat(parameters('productName'),'NSG')]\",\r\n    \"nicName\": \"[concat(parameters('productName'),'NIC')]\",\r\n    \"publicIPAddressName\": \"[concat(parameters('productName'),'PublicIP')]\",\r\n    \"virtualNetworkId\": \"[resourceId(parameters('infraResourceGroup'), 'Microsoft.Network/virtualNetworks', 'VirtualNetwork')]\",\r\n    \"subnetId\": \"[concat(variables('virtualNetworkId'),'/subnets/', 'Default')]\",\r\n    \"keyVaultName\": \"[concat('keyvault', parameters('udp'))]\"\r\n  },\r\n  \"resources\": [{\r\n    \"apiVersion\": \"2016-01-01\",\r\n    \"type\": \"Microsoft.Storage/storageAccounts\",\r\n    \"name\": \"[variables('vmStorageName')]\",\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"sku\": {\r\n      \"name\": \"Premium_LRS\",\r\n      \"tier\": \"Premium\"\r\n    },\r\n    \"kind\": \"Storage\",\r\n    \"properties\": {\r\n      \"encryption\": {\r\n        \"keySource\": \"Microsoft.Storage\",\r\n        \"services\": {\r\n          \"blob\": {\r\n            \"enabled\": true\r\n          }\r\n        }\r\n      }\r\n    }\r\n  }, {\r\n    \"apiVersion\": \"2015-06-15\",\r\n    \"type\": \"Microsoft.Network/networkInterfaces\",\r\n    \"name\": \"[variables('nicName')]\",\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"dependsOn\": [\r\n      \"[concat('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]\"\r\n    ],\r\n    \"properties\": {\r\n      \"ipConfigurations\": [{\r\n        \"name\": \"[concat(parameters('productName'),'-IPConfig')]\",\r\n        \"properties\": {\r\n          \"privateIPAllocationMethod\": \"Dynamic\",\r\n          \"publicIPAddress\": {\r\n            \"id\": \"[resourceId('Microsoft.Network/publicIPAddresses/', variables('publicIPAddressName'))]\"\r\n          },\r\n          \"subnet\": {\r\n            \"id\": \"[variables('subnetId')]\"\r\n          }\r\n        }\r\n      }],\r\n      \"networkSecurityGroup\": {\r\n        \"id\": \"[resourceId(parameters('infraResourceGroup'), 'Microsoft.Network/networkSecurityGroups/', variables('nsgName'))]\"\r\n      }\r\n    }\r\n  }, {\r\n    \"apiVersion\": \"2015-05-01-preview\",\r\n    \"type\": \"Microsoft.Network/publicIPAddresses\",\r\n    \"name\": \"[variables('publicIPAddressName')]\",\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"properties\": {\r\n      \"publicIPAllocationMethod\": \"Static\",\r\n      \"idleTimeoutInMinutes\": 30,\r\n      \"dnsSettings\": {\r\n        \"domainNameLabel\": \"[toLower(concat(parameters('productName'),'-stack',parameters('udp')))]\"\r\n      }\r\n    }\r\n  }, {\r\n    \"apiVersion\": \"2015-06-15\",\r\n    \"type\": \"Microsoft.Compute/virtualMachines\",\r\n    \"name\": \"[variables('vmName')]\",\r\n    \"location\": \"[resourceGroup().location]\",\r\n    \"dependsOn\": [\r\n      \"[concat('Microsoft.Storage/storageAccounts/', variables('vmStorageName'))]\",\r\n      \"[concat('Microsoft.Network/networkInterfaces/', variables('nicName'))]\"\r\n    ],\r\n    \"properties\": {\r\n      \"hardwareProfile\": {\r\n        \"vmSize\": \"[parameters('vmSize')]\"\r\n      },\r\n      \"osProfile\": {\r\n        \"computerName\": \"[variables('vmName')]\",\r\n        \"adminUsername\": \"[parameters('vmAdminUsername')]\",\r\n        \"adminPassword\": \"[parameters('vmAdminPassword')]\",\r\n        \"windowsConfiguration\": {\r\n          \"provisionVMAgent\": true,\r\n          \"enableAutomaticUpdates\": true\r\n        }\r\n      },\r\n      \"storageProfile\": {\r\n        \"imageReference\": {\r\n          \"publisher\": \"MicrosoftWindowsServer\",\r\n          \"offer\": \"WindowsServer\",\r\n          \"sku\": \"2016-Datacenter\",\r\n          \"version\": \"latest\"\r\n        },\r\n        \"osDisk\": {\r\n          \"name\": \"[concat(variables('vmName'),'-OS')]\",\r\n          \"vhd\": {\r\n            \"uri\": \"[concat('http://',variables('vmStorageName'),'.blob.core.windows.net/vhds/',variables('vmName'),'-OS.vhd')]\"\r\n          },\r\n          \"caching\": \"ReadWrite\",\r\n          \"createOption\": \"FromImage\"\r\n        }\r\n      },\r\n      \"networkProfile\": {\r\n        \"networkInterfaces\": [{\r\n          \"id\": \"[resourceId('Microsoft.Network/networkInterfaces',variables('nicName'))]\"\r\n        }]\r\n      }\r\n    },\r\n    \"resources\": [{\r\n      \"type\": \"extensions\",\r\n      \"name\": \"AzureDiskEncryption\",\r\n      \"apiVersion\": \"2016-03-30\",\r\n      \"location\": \"[resourceGroup().location]\",\r\n      \"properties\": {\r\n        \"publisher\": \"Microsoft.Azure.Security\",\r\n        \"type\": \"AzureDiskEncryption\",\r\n        \"typeHandlerVersion\": \"1.1\",\r\n        \"autoUpgradeMinorVersion\": true,\r\n        \"settings\": {\r\n          \"AADClientID\": \"[parameters('clientId')]\",\r\n          \"KeyVaultURL\": \"[concat('https://', variables('keyVaultName'), '.vault.azure.net/')]\",\r\n          \"KeyEncryptionAlgorithm\": \"RSA-OAEP\",\r\n          \"VolumeType\": \"All\",\r\n          \"EncryptionOperation\": \"EnableEncryption\"\r\n        },\r\n        \"protectedSettings\": {\r\n          \"AADClientSecret\": \"[parameters('clientSecret')]\"\r\n        }\r\n      },\r\n      \"dependsOn\": [\r\n        \"[concat('Microsoft.Compute/virtualMachines/', variables('vmName'))]\"\r\n      ]\r\n    }]\r\n  }],\r\n  \"outputs\": {\r\n    \"fqdn\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[reference(variables('publicIPAddressName')).dnsSettings.fqdn]\"\r\n    },\r\n    \"keyVaultSecretUrl\": {\r\n      \"type\": \"string\",\r\n      \"value\": \"[reference(resourceId('Microsoft.Compute/virtualMachines/extensions',  variables('vmName'),  'AzureDiskEncryption')).instanceView.statuses[0].message]\"\r\n    }\r\n  }\r\n}",
            "Octopus.Action.Azure.ResourceGroupDeploymentMode": "Complete"
          }
        }
      ],
      "Properties": {
        "Octopus.Action.TargetRoles": "ARM Provisioning"
      }
    },
    {
      "Id": "43c88d76-2412-45ed-a44c-844f962f4bb6",
      "Name": "Enable KeyVault Disk Encryption",
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "RequiresPackagesToBeAcquired": false,
      "Actions": [
        {
          "Id": "94a6703a-1788-47c9-a0a5-2860f9925ffb",
          "Name": "Enable KeyVault Disk Encryption",
          "ActionType": "Octopus.AzureResourceGroup",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.Azure.AccountId": "azureserviceprincipal-microsoft-azure-service-principal",
            "Octopus.Action.Azure.ResourceGroupName": "#{TeamCityRg}",
            "Octopus.Action.Azure.TemplateSource": "Inline",
            "Octopus.Action.Azure.ResourceGroupTemplateParameters": "{\"productName\":{\"value\":\"TeamCity\"},\"keyVaultResourceID\":{\"value\":\"#{KeyVaultResourceId}\"},\"keyVaultSecretUrl\":{\"value\":\"#{Octopus.Action[Provision Windows Server 2016 VM].Output.AzureRMOutputs[keyVaultSecretUrl]}\"}}",
            "Octopus.Action.Azure.ResourceGroupDeploymentMode": "Incremental",
            "Octopus.Action.Azure.ResourceGroupTemplate": "{\r\n    \"$schema\": \"https://schema.management.azure.com/schemas/2015-01-01/deploymentTemplate.json#\",\r\n    \"contentVersion\": \"1.0.0.0\",\r\n    \"parameters\": {\r\n        \"productName\": {\r\n            \"type\": \"string\",\r\n            \"metadata\": {\r\n                \"description\": \"Name of the product that is running on this VM\"\r\n            }\r\n        },\r\n        \"keyVaultResourceID\": {\r\n            \"type\": \"string\",\r\n            \"metadata\": {\r\n                \"description\": \"KeyVault resource id. Ex: /subscriptions/9135e259-1f76-4dbd-a5c8-bc4fcdf3cf1c/resourceGroups/DiskEncryptionTest/providers/Microsoft.KeyVault/vaults/DiskEncryptionTestAus\"\r\n            }\r\n        },\r\n        \"keyVaultSecretUrl\": {\r\n            \"type\": \"string\",\r\n            \"metadata\": {\r\n                \"description\": \"KeyVault secret Url. Ex: https://diskencryptiontestaus.vault.azure.net/secrets/BitLockerEncryptionSecretWithKek/e088818e865e48488cf363af16dea596\"\r\n            }\r\n        }\r\n    },\r\n    \"variables\": {\r\n        \"vmName\": \"[concat(parameters('productName'),'VM')]\"\r\n    },\r\n    \"resources\": [{\r\n        \"apiVersion\": \"2015-06-15\",\r\n        \"type\": \"Microsoft.Compute/virtualMachines\",\r\n        \"name\": \"[variables('vmName')]\",\r\n        \"location\": \"[resourceGroup().location]\",\r\n        \"properties\": {\r\n            \"storageProfile\": {\r\n                \"osDisk\": {\r\n                    \"encryptionSettings\": {\r\n                        \"diskEncryptionKey\": {\r\n                            \"sourceVault\": {\r\n                                \"id\": \"[parameters('keyVaultResourceID')]\"\r\n                            },\r\n                            \"secretUrl\": \"[parameters('keyVaultSecretUrl')]\"\r\n                        }\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    }]\r\n}"
          }
        }
      ],
      "Properties": {
        "Octopus.Action.TargetRoles": "ARM Provisioning"
      }
    },
    {
      "Id": "03eb56d0-5a5b-470e-8cd6-5012003c0774",
      "Name": "Create TeamCity SQL Database",
      "Condition": "Success",
      "StartTrigger": "StartWithPrevious",
      "RequiresPackagesToBeAcquired": false,
      "Actions": [
        {
          "Id": "2d96a19b-8741-4794-a001-0c16c8254569",
          "Name": "Create TeamCity SQL Database",
          "ActionType": "Octopus.AzurePowerShell",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.Azure.AccountId": "azureserviceprincipal-microsoft-azure-service-principal",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "Remove-AzureRmSqlDatabase -ResourceGroupName $InfraRg -ServerName $SqlServerName -DatabaseName 'TeamCity' -Force -ErrorAction Ignore\n$teamCityDb = New-AzureRmSqlDatabase -ResourceGroupName $InfraRg -ServerName $SqlServerName -DatabaseName 'TeamCity' -CollationName 'SQL_Latin1_General_CP1_CI_AS' -Edition 'Basic'\n$teamCityDb\nSet-AzureRmSqlDatabaseTransparentDataEncryption -ResourceGroupName $teamCityDb.ResourceGroupName -ServerName $teamCityDb.ServerName -DatabaseName $teamCityDb.DatabaseName -State Enabled"
          }
        }
      ],
      "Properties": {
        "Octopus.Action.TargetRoles": "ARM Provisioning"
      }
    },
    {
      "Id": "75bd1bdd-b077-4f40-81d4-3968663b84c6",
      "Name": "Azure Automation DSC",
      "Condition": "Success",
      "StartTrigger": "StartWithPrevious",
      "RequiresPackagesToBeAcquired": false,
      "Actions": [
        {
          "Id": "28481b27-6c10-473d-88b6-f5a09e385b53",
          "Name": "Import DSC Configuration",
          "ActionType": "Octopus.AzurePowerShell",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.Azure.AccountId": "azureserviceprincipal-microsoft-azure-service-principal",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "& net use T: \\\\$StackResourcesName.file.core.windows.net\\dsc /u:$StackResourcesName $StackResourcesKey\nImport-AzureRmAutomationDscConfiguration -ResourceGroupName $InfraRg -AutomationAccountName $AutomationAccountName -SourcePath $DSCConfigPath -Force -Published\n& net use T: /DELETE\n\n$CompilationJob = Start-AzureRmAutomationDscCompilationJob -ResourceGroupName $InfraRg -AutomationAccountName $AutomationAccountName -ConfigurationName $DSCConfigurationName -Parameters @{\n    ApiKey = $APIKey\n    OctopusServerUrl = $OctopusHostHeader\n}\n\nwhile ($CompilationJob.EndTime -eq $null -and $CompilationJob.Exception -eq $null)\n{\n        Write-Host 'Waiting for compilation...'\n        Start-Sleep -Seconds 10\n        $CompilationJob = $CompilationJob | Get-AzureRmAutomationDscCompilationJob\n}\n\n$CompilationJob | Get-AzureRmAutomationDscCompilationJobOutput -Stream Any"
          }
        },
        {
          "Id": "9e81cbb7-a429-462a-a0f7-9a7682c34c0e",
          "Name": "Register DSC Node",
          "ActionType": "Octopus.AzurePowerShell",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.Azure.AccountId": "azureserviceprincipal-microsoft-azure-service-principal",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "Register-AzureRmAutomationDscNode -AutomationAccountName $AutomationAccountName -ResourceGroupName $InfraRg -AzureVMName $TeamCityVMName -AzureVMResourceGroup $TeamCityRg -AzureVMLocation $AzureRegion -NodeConfigurationName ('{0}.{1}' -f $DSCConfigurationName, $DSCNodeName) -ActionAfterReboot ContinueConfiguration -ConfigurationMode ApplyAndAutocorrect -ConfigurationModeFrequencyMins 15 -RefreshFrequencyMins 30 -RebootNodeIfNeeded $true -AllowModuleOverwrite $true\n\n$currentPollWait = 10\n$previousPollWait = 0\n$continueToPoll = $true\n$maxWaitSeconds = 60\nwhile ($continueToPoll)\n{\n\tStart-Sleep -Seconds ([System.Math]::Min($currentPollWait, $maxWaitSeconds))\n        $node = Get-AzureRmAutomationDscNode -ResourceGroupName $InfraRg -AutomationAccountName $AutomationAccountName -Name $TeamCityVMName\n        if ($node.Status -eq 'Compliant') {\n                Write-Host \"Node is compliant\"\n                $continueToPoll = $false\n        }\n        else {\n                Write-Host \"Node status is $($node.Status), waiting for compliance...\"\n        }\n\tif ($currentPollWait -lt $maxWaitSeconds){\n\t\t$temp = $previousPollWait\n\t\t$previousPollWait = $currentPollWait\n\t\t$currentPollWait = $temp + $currentPollWait\n\t}\n}"
          }
        }
      ],
      "Properties": {
        "Octopus.Action.TargetRoles": "ARM Provisioning"
      }
    },
    {
      "Id": "0aadda3f-2fae-4ecb-8717-f44a38deeb60",
      "Name": "Import TeamCity Initial State",
      "Condition": "Success",
      "StartTrigger": "StartAfterPrevious",
      "RequiresPackagesToBeAcquired": false,
      "Actions": [
        {
          "Id": "c8022bc0-bcc1-4cb1-b2ee-01beeb54a415",
          "Name": "Reset to known state",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "if (Test-Path $ExportPath) {\n    Remove-Item $ExportPath -Recurse -Force\n}\nNew-Item -ItemType Directory -Path $ExportPath\n\nif (Test-Path $TeamCityDataDir) {\n    Remove-Item $TeamCityDataDir -Recurse -Force\n}\nNew-Item -ItemType Directory -Path $TeamCityDataDir\n"
          }
        },
        {
          "Id": "5f12d880-c3fa-4ba3-980d-12e88173ea00",
          "Name": "Retrieve TeamCity Export",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "& net use T: \\\\$StackResourcesName.file.core.windows.net\\teamcity /u:$StackResourcesName $StackResourcesKey\nCopy-Item -Path T:\\* -Destination $ExportPath -Recurse\n& net use T: /DELETE\n"
          }
        },
        {
          "Id": "60a2239f-48c9-433a-9ff8-9e3851480c3b",
          "Name": "Prepare export for import",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "Compress-Archive -Path \"${ExportPath}\\*\" -DestinationPath $ArchivePath -CompressionLevel Fastest\r\n\r\nNew-Item -Path $JDBCDst -ItemType Directory\r\nCopy-Item -Path $JDBCSrc -Destination $JDBCDst\r\n\r\n[system.io.file]::WriteAllText($DatabaseConfig, ([system.io.file]::ReadAllText($DatabaseConfig, [system.text.encoding]::UTF8)), [system.text.encoding]::ASCII)"
          }
        },
        {
          "Id": "18330634-5115-4bd1-8726-5a4463d840d8",
          "Name": "Run maintainDB Restore",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "& C:\\TeamCity\\bin\\maintainDB.cmd restore -F $ArchivePath -T $DatabaseConfig"
          }
        },
        {
          "Id": "1136ddc9-bbf3-4660-94d5-441eaf5d8aad",
          "Name": "Copy TeamCity Config",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "$srcConfig = Join-Path $ExportPath 'config'\n$dstConfig = Join-Path $TeamCityDataDir 'config'\nif (Test-Path $dstConfig) {\n    Remove-Item -Path $dstConfig -Recurse -Force \n}\nCopy-Item -Recurse -Force -Path $srcConfig -Destination $TeamCityDataDir"
          }
        },
        {
          "Id": "3c132e0f-539f-48db-8936-41fcdb56f6f6",
          "Name": "Start TeamCity",
          "ActionType": "Octopus.Script",
          "IsDisabled": false,
          "Environments": [],
          "Channels": [],
          "TenantTags": [],
          "Properties": {
            "Octopus.Action.RunOnServer": "false",
            "Octopus.Action.Script.Syntax": "PowerShell",
            "Octopus.Action.Script.ScriptSource": "Inline",
            "Octopus.Action.Script.ScriptBody": "Start-Service TeamCity"
          }
        }
      ],
      "Properties": {
        "Octopus.Action.TargetRoles": "TeamCity Server (Windows)"
      }
    }
  ],
  "RelatedDocumentIds": []
}